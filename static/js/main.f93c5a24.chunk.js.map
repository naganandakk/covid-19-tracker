{"version":3,"sources":["components/header/Header.js","components/country-table/TableColumns.js","components/country-table/CountryTable.js","components/world-map/WorldMap.js","components/totals-table/TotalsCard.js","components/totals-table/TotalsTable.js","apis/covid19.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","numberFormatter","number","toLocaleString","columns","name","selector","sortable","format","row","country","toUpperCase","compact","cases","total","right","active","recovered","deaths","CountryTable","TableColumns","data","this","props","statistics","pagination","paginationPerPage","defaultSortField","defaultSortAsc","highlightOnHover","React","Component","WorldMap","Fragment","TotalsCard","style","fontSize","fontWeight","title","count","TotalsTable","color","totals","client","axios","create","baseURL","interceptors","request","use","headers","App","state","isLoading","fetchData","setState","covid19api","get","then","response","_","find","remove","catch","error","console","log","marginTop","showStats","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f93c5a24.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return(\n        <nav className=\"navbar navbar-default\">\n            <div className=\"container-fluid\">\n                <div className=\"navbar-header\">\n                    COVID-19 TRACKER\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default Header;","const numberFormatter = (number) => {\n    if (number) {\n        return number.toLocaleString();\n    } else {\n        return number;\n    }\n}\n\nconst countryFormatter = (country) => {\n    return country.toUpperCase();\n}\n\nconst columns = [\n    {\n        name: 'COUNTRY',\n        selector: 'country',\n        sortable: true,\n        format: row => countryFormatter(row.country),\n        compact: true,\n    },\n    {\n        name: 'CONFIRMED',\n        selector: 'cases.total',\n        sortable: true,\n        format: row => numberFormatter(row.cases.total),\n        compact: true,\n        right: true\n    },\n    {\n        name: 'ACTIVE',\n        selector: 'cases.active',\n        sortable: true,\n        format: row => numberFormatter(row.cases.active),\n        compact: true,\n        right: true\n    },\n    {\n        name: 'RECOVERED',\n        selector: 'cases.recovered',\n        sortable: true,\n        format: row => numberFormatter(row.cases.recovered),\n        compact: true,\n        right: true\n    },\n    {\n        name: 'DEATHS',\n        selector: 'deaths.total',\n        sortable: true,\n        format: row => numberFormatter(row.deaths.total),\n        compact: true,\n        right: true\n    }\n];\n\nexport default columns;","import React from \"react\";\nimport DataTable from \"react-data-table-component\";\nimport TableColumns from \"./TableColumns\";\n\nclass CountryTable extends React.Component {\n\n    render() {\n        return(\n            <DataTable\n                columns={TableColumns}\n                data={this.props.statistics}\n                pagination={true}\n                paginationPerPage={10}\n                defaultSortField={'cases.total'}\n                defaultSortAsc={false}\n                highlightOnHover={true}\n            />\n        );\n    }\n}\n\nexport default CountryTable;","import React from \"react\";\n\nfunction WorldMap() {\n    return(\n        <React.Fragment>\n            <h4>STATISTICS BY COUNTRY</h4>\n            <h6>Coming soon</h6>\n        </React.Fragment>\n    );\n}\n\nexport default WorldMap;","import React from \"react\";\n\nfunction TotalsCard(props) {\n    return(\n        <div className=\"text-center\" style={props.style}>\n            <h6 style={{\n                fontSize: '16px',\n                fontWeight: 600\n            }}>{props.title}</h6>\n            <h5 style={{\n                fontWeight: 600\n            }}>{props.count ? props.count.toLocaleString() : props.count}</h5>\n        </div>\n    )\n}\n\nexport default TotalsCard;","import React from \"react\";\nimport TotalsCard from \"./TotalsCard\";\n\nclass TotalsTable extends React.Component {\n\n    render() {\n        return(\n            <div className=\"row\">\n                <div className=\"col-xs-6 col-md-3\">\n                    <TotalsCard\n                        style={{\n                            color: \"red\"\n                        }}\n                        title=\"CONFIRMED\"\n                        count={this.props.totals.cases.total}\n                    />\n                </div>\n                <div className=\"col-xs-6 col-md-3\">\n                    <TotalsCard\n                        style={{\n                            color: \"blue\"\n                        }}\n                        title=\"ACTIVE\"\n                        count={this.props.totals.cases.active}\n                    />\n                </div>\n                <div className=\"col-xs-6 col-md-3\">\n                    <TotalsCard\n                        style={{\n                            color: \"green\"\n                        }}\n                        title=\"RECOVERED\"\n                        count={this.props.totals.cases.recovered}\n                    />\n                </div>\n                <div className=\"col-xs-6 col-md-3\">\n                    <TotalsCard\n                        style={{\n                            color: \"grey\"\n                        }}\n                        title=\"DEATHS\"\n                        count={this.props.totals.deaths.total}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TotalsTable;","import axios from 'axios';\n\nconst client = axios.create({\n    baseURL: \"https://covid-193.p.rapidapi.com\"\n})\n\nclient.interceptors.request.use((request) => {\n    request.headers[\"x-rapidapi-host\"] =  \"covid-193.p.rapidapi.com\";\n    request.headers[\"x-rapidapi-key\"] = \"c70fc1a073msha3436ddc701e093p1fa48fjsncc32806fee38\";\n\n    return request;\n});\n\nexport default client;","import React from 'react';\nimport _ from 'lodash';\nimport Header from \"./components/header/Header\";\nimport CountryTable from \"./components/country-table/CountryTable\";\nimport WorldMap from \"./components/world-map/WorldMap\";\nimport TotalsTable from \"./components/totals-table/TotalsTable\";\nimport covid19api from \"./apis/covid19\";\n\nclass App extends React.Component {\n    state = {\n        statistics: [],\n        totals: {\n            cases: {},\n            deaths: {}\n        },\n        isLoading: true\n    };\n\n    constructor(props) {\n        super(props);\n        this.fetchData();\n    }\n\n    fetchData() {\n        this.setState({\n            isLoading: true\n        })\n\n        covid19api.get(\"/statistics\")\n            .then((response) => {\n                let statistics = response.data.response;\n                let totals = _.find(statistics, {\n                    country: 'All'\n                });\n                _.remove(statistics, {\n                    country: 'All'\n                });\n                this.setState({\n                    statistics: statistics,\n                    totals: totals,\n                    isLoading: false\n                });\n            }).catch((error) => {\n                console.log(error);\n                this.setState({\n                    isLoading: false\n                })\n            });\n    }\n\n    showStats() {\n        if (this.state.isLoading) {\n            return(\n                <div className=\"text-center\">\n                    <h4>Loading...</h4>\n                </div>\n            );\n        } else {\n            return(\n                <React.Fragment>\n                    <div className=\"col-xs-12 col-md-6\">\n                        <TotalsTable totals={this.state.totals}/>\n                        <CountryTable statistics={this.state.statistics}/>\n                    </div>\n                    <div className=\"col-xs-12 col-md-6\">\n                        <WorldMap/>\n                    </div>\n                </React.Fragment>\n            )\n        }\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <Header/>\n                <div className=\"container-fluid\" style={{\n                    marginTop: '20px'\n                }}>\n                    <div className=\"row\">\n                        {this.showStats()}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}