{"version":3,"sources":["apis/covid19.js","components/totals-table/TotalsCard.js","components/totals-table/TotalsTable.js","components/country-table/TableColumns.js","components/country-table/CountryTable.js","components/world-map/StatsCard.js","components/world-map/SelectedCountryStats.js","components/world-map/CountryNameConverter.js","components/world-map/WorldMap.js","pages/dashboard/index.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["client","axios","create","baseURL","interceptors","request","use","headers","TotalsCard","this","renderText","colorClassName","props","title","toLowerCase","className","formatCount","count","toLocaleString","React","Component","TotalsTable","cards","prepareCards","map","card","renderTotalsCard","totals","cases","total","active","recovered","deaths","key","countFormatter","headerFormatter","headerName","columns","name","selector","sortable","compact","cell","row","country","toUpperCase","right","CountryTable","renderAffectedCountriesCount","renderTable","statistics","length","TableColumns","data","defaultSortField","defaultSortAsc","highlightOnHover","dense","noHeader","StatsCard","SelectedCountryStats","selectedCountry","renderCard","mappedCountry","trim","countrySplits","replace","split","e","charAt","slice","join","caseContributionColors","WorldMap","handleMouseOver","convertCountryName","properties","stats","setState","handleEventsOnCountries","feature","layer","on","state","center","lat","lng","zoom","mapRef","createRef","_","keyBy","Fragment","renderMap","Map","animate","zoomControl","draggable","ref","GeoJSON","worldGeoJSON","style","getCountryStyle","onEachFeature","contribution","fillColor","confirmedCases","getColorByContribution","color","weight","fillOpacity","DashboardHeader","fromNow","lastUpdatedAt","Dashboard","isLoading","flag","isPageLoading","renderLoader","isStatsReady","renderStats","overallStats","enableLoader","fetchData","refreshDashboardHandler","setInterval","clearInterval","setIsLoading","covid19api","get","then","response","statsByCountry","find","remove","updateStats","disableLoader","catch","error","console","log","time","target","rel","href","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.60cbd691.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst client = axios.create({\n    baseURL: \"https://covid-193.p.rapidapi.com\"\n})\n\nclient.interceptors.request.use((request) => {\n    request.headers[\"x-rapidapi-host\"] =  \"covid-193.p.rapidapi.com\";\n    request.headers[\"x-rapidapi-key\"] = \"c70fc1a073msha3436ddc701e093p1fa48fjsncc32806fee38\";\n\n    return request;\n});\n\nexport default client;","import React from \"react\";\nimport './TotalsCard.css';\n\nclass TotalsCard extends React.Component {\n    render() {\n        return this.renderText();\n    }\n\n    renderText() {\n        const colorClassName = \"color-\" + this.props.title.toLowerCase();\n        return(\n            <div className={`totals-card ${colorClassName}`}>\n                <p className=\"totals-card-title\">{this.props.title}</p>\n                <p className=\"totals-card-count\">{this.formatCount(this.props.count)}</p>\n            </div>\n        )\n    }\n\n    formatCount(count) {\n        return count ? count.toLocaleString() : count\n    }\n}\n\nexport default TotalsCard;","import React from \"react\";\nimport TotalsCard from \"./TotalsCard\";\n\nclass TotalsTable extends React.Component {\n\n    render() {\n        const cards = this.prepareCards();\n        return(\n            <div className=\"row totals-card-table\">\n                { cards.map(card => {\n                    return this.renderTotalsCard(card)\n                })}\n            </div>\n        )\n    }\n\n    prepareCards() {\n        return [\n            { title: \"CONFIRMED\", count: this.props.totals.cases.total},\n            { title: \"ACTIVE\", count: this.props.totals.cases.active,},\n            { title: \"RECOVERED\", count: this.props.totals.cases.recovered},\n            { title: \"DECEASED\", count: this.props.totals.deaths.total}\n        ];\n    }\n\n    renderTotalsCard(card) {\n        return(\n            <div key={card.title} className=\"col-xs-3 col-sm-3 col-md-3 col-lg-3 totals-card-container\">\n                <TotalsCard\n                    title={card.title}\n                    count={card.count}\n                />\n            </div>\n        )\n    }\n}\n\nexport default TotalsTable;","import React from \"react\";\nimport './TableColumn.css';\n\nconst countryFormatter = (country) => {\n    return <div className=\"country-table-cell country-name\">{country.toUpperCase()}</div>;\n}\n\nconst countFormatter = (count) => {\n    if (count) {\n        count = count.toLocaleString();\n    }\n\n    return(\n        <div className=\"country-table-cell count\">{count}</div>\n    )\n}\n\nconst headerFormatter = (headerName) => {\n    return(\n        <div className=\"country-table-header\">{headerName}</div>\n    )\n}\n\nconst columns = [\n    {\n        name: headerFormatter('COUNTRY'),\n        selector: 'country',\n        sortable: true,\n        compact:true,\n        cell: row => countryFormatter(row.country)\n    },\n    {\n        name: headerFormatter('CONFIRMED'),\n        selector: 'cases.total',\n        sortable: true,\n        right: true,\n        compact:true,\n        cell: row => countFormatter(row.cases.total)\n    },\n    {\n        name: headerFormatter('ACTIVE'),\n        selector: 'cases.active',\n        sortable: true,\n        right: true,\n        compact:true,\n        cell: row => countFormatter(row.cases.active)\n    },\n    {\n        name: headerFormatter('RECOVERED'),\n        selector: 'cases.recovered',\n        sortable: true,\n        right: true,\n        compact:true,\n        cell: row => countFormatter(row.cases.recovered)\n    },\n    {\n        name: headerFormatter('DECEASED'),\n        selector: 'deaths.total',\n        sortable: true,\n        right: true,\n        compact: true,\n        cell: row => countFormatter(row.deaths.total)\n    }\n];\n\nexport default columns;","import React from \"react\";\nimport DataTable from \"react-data-table-component\";\nimport TableColumns from \"./TableColumns\";\nimport './CountryTable.css';\n\nclass CountryTable extends React.Component {\n\n    render() {\n        return(\n            <div className=\"row\">\n                <div className=\"col-lg-12\">\n                    {this.renderAffectedCountriesCount()}\n                    {this.renderTable()}\n                </div>\n            </div>\n        );\n    }\n\n    renderAffectedCountriesCount() {\n        return(\n            <div className=\"text-right\">\n                <p className=\"affected-countries-count\">{this.props.statistics.length} COUNTRIES AFFECTED</p>\n            </div>\n        );\n    }\n\n    renderTable() {\n        return (\n            <div className=\"country-table-wrapper\">\n                <DataTable\n                    className=\"country-table\"\n                    columns={TableColumns}\n                    data={this.props.statistics}\n                    defaultSortField={'cases.total'}\n                    defaultSortAsc={false}\n                    highlightOnHover={true}\n                    dense={true}\n                    noHeader={true}\n                />\n            </div>\n        );\n    }\n}\n\nexport default CountryTable;","import React from \"react\";\nimport './StatsCard.css';\n\nfunction StatsCard(props) {\n    const colorClassName = \"color-\" + props.title.toLowerCase();\n\n    return(\n        <div className={`${colorClassName} country-stats-card`}>\n            <p className=\"country-stats-card-title\">{props.title}</p>\n            <p className=\"country-stats-card-count\">{props.count.toLocaleString()}</p>\n        </div>\n    )\n}\n\nexport default StatsCard;","import React from \"react\";\nimport StatsCard from \"./StatsCard\";\nimport './SelectedCountryStats.css'\n\nclass SelectedCountryStats extends React.Component {\n    render() {\n        const cards = this.prepareCards();\n        return(\n            <div className=\"row country-stats\">\n                <div className=\"col-lg-12\">\n                    <h6 className=\"color-confirmed stats-card-country-name\">{this.props.selectedCountry.country.toUpperCase()}</h6>\n                </div>\n                { cards.map(card => {\n                    return this.renderCard(card)\n                })}\n            </div>\n        )\n    }\n\n    prepareCards() {\n        return [\n            { title: \"CONFIRMED\", count: this.props.selectedCountry.cases.total},\n            { title: \"ACTIVE\", count: this.props.selectedCountry.cases.active,},\n            { title: \"RECOVERED\", count: this.props.selectedCountry.cases.recovered},\n            { title: \"DECEASED\", count: this.props.selectedCountry.deaths.total}\n        ];\n    }\n\n    renderCard(card) {\n        return(\n            <div key={card.title} className=\"col-xs-3 col-sm-3 col-md-3 col-lg-3 country-stats-card-wrapper\">\n                <StatsCard\n                    title={card.title}\n                    count={card.count}\n                />\n            </div>\n        )\n    }\n}\n\nexport default SelectedCountryStats;","export default function (country) {\n    country = country.toLowerCase().trim();\n    const conversionMap = {\n        \"united states\": \"USA\",\n        \"united kingdom\": \"UK\",\n        \"united arab emirates\": \"UAE\",\n        \"dominican rep.\": \"Dominican-Republic\",\n        \"central african rep.\": \"CAR\",\n        \"dem. rep. congo\": \"DRC\",\n        \"korea\": \"S.-Korea\"\n    }\n    const mappedCountry = conversionMap[country];\n    if (mappedCountry) {\n        country = mappedCountry;\n    } else {\n        country = country.replace(/ /g, \"-\");\n        const countrySplits = country.split(\"-\").map((e) => {\n            return e.charAt(0).toUpperCase() + e.slice(1);\n        });\n        country = countrySplits.join(\"-\");\n\n        // Issue with map. J&K coming as empty\n        if ((country === null) || (country === \"\")) {\n            country = \"India\";\n        }\n    }\n\n    return country;\n}","import React, {createRef} from \"react\";\nimport _ from 'lodash';\nimport SelectedCountryStats from \"./SelectedCountryStats\";\nimport { Map, GeoJSON } from \"react-leaflet\";\nimport worldGeoJSON from 'world-map-geojson';\nimport 'leaflet/dist/leaflet.css';\nimport './WorldMap.css';\nimport convertCountryName from './CountryNameConverter'\n\nconst caseContributionColors = {\n    \"very-high\": \"#BD302A\",\n    \"high\": \"#E93D36\",\n    \"medium\": \"#FA7152\",\n    \"medium-low\": \"#FCA588\",\n    \"low\": \"#FDD533\",\n    \"no-impact\": \"#87CEEB\"\n};\n\nclass WorldMap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedCountry: props.stats[0],\n            center: {\n                lat: 40.8471,\n                lng: 14.0625\n            },\n            zoom: 1\n        };\n        this.mapRef = createRef();\n        this.stats = _.keyBy(props.stats, 'country');\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                <div className=\"world-map-header\">\n                    <h4>STATISTICS BY COUNTRY</h4>\n                    <h6>Hover over a country for more details</h6>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-lg-12 selected-country-stats\">\n                        <SelectedCountryStats selectedCountry={this.state.selectedCountry}/>\n                    </div>\n                    <div className=\"col-lg-12 map-container\">\n                        {this.renderMap()}\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderMap() {\n        return(\n            <Map\n                animate={true}\n                className=\"world-map\"\n                center={this.state.center}\n                zoom={this.state.zoom}\n                zoomControl={false}\n                draggable={false}\n                ref={this.mapRef}\n            >\n                <GeoJSON\n                    data={worldGeoJSON}\n                    style={(feature) => {\n                        return this.getCountryStyle(feature.properties.name);\n                    }}\n                    onEachFeature={this.handleEventsOnCountries}\n                />\n            </Map>\n        )\n    }\n\n    handleMouseOver = (e)  => {\n        const country = convertCountryName(e.properties.name);\n        const stats = this.stats[country];\n        if (stats) {\n            this.setState({\n                selectedCountry: stats\n            })\n        } else {\n            this.setState({\n                selectedCountry: {\n                    country: country,\n                    cases: {\n                        total: 'NA',\n                        active: 'NA',\n                        recovered: 'NA'\n                    },\n                    deaths: {\n                        total: 'NA'\n                    }\n                }\n            })\n        }\n    };\n\n    handleEventsOnCountries = (feature, layer) => {\n        const handleMouseOver = this.handleMouseOver;\n\n        layer.on(\"mouseover\", function() {\n            handleMouseOver(feature);\n        });\n\n        layer.on(\"click\", function () {\n            handleMouseOver(feature);\n        })\n    }\n\n    getColorByContribution(contribution) {\n        if (contribution >= 25000) {\n            return caseContributionColors[\"very-high\"];\n        } else if (contribution >= 15000) {\n            return caseContributionColors[\"high\"];\n        } else if (contribution >= 10000) {\n            return caseContributionColors[\"medium\"];\n        } else if (contribution >= 3000) {\n            return caseContributionColors[\"medium-low\"];\n        } else if (contribution > 500) {\n            return caseContributionColors[\"low\"];\n        } else {\n            return caseContributionColors[\"no-impact\"];\n        }\n    }\n\n    getCountryStyle(country) {\n        const stats = this.stats[convertCountryName(country)];\n        let fillColor = \"#FFFFFF\";\n\n        if (stats) {\n            const confirmedCases = stats.cases.total;\n            fillColor = this.getColorByContribution(confirmedCases);\n        }\n\n        return {\n            color: '#D3D3D3',\n            weight: 0.5,\n            fillColor: fillColor,\n            fillOpacity: 1,\n        }\n    }\n}\n\nexport default WorldMap;","import React from \"react\";\nimport covid19api from \"../../apis/covid19\";\nimport _ from \"lodash\";\nimport Moment from 'react-moment';\nimport TotalsTable from \"../../components/totals-table/TotalsTable\";\nimport CountryTable from \"../../components/country-table/CountryTable\";\nimport './index.css';\nimport WorldMap from \"../../components/world-map/WorldMap\";\n\nconst MINUTE_5 = 1000 * 60 * 5;\n\nfunction DashboardHeader(props) {\n    return(\n        <div className=\"row\">\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-7 dashboard-header-col title\">\n                <h4 className=\"dashboard-header\">COVID-19 TRACKER</h4>\n            </div>\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-5 text-right dashboard-header-col time\">\n                <h6 className=\"last-updated-header\">LAST UPDATED</h6>\n                <h6 className=\"last-updated-time\">ABOUT <Moment fromNow>{props.lastUpdatedAt}</Moment></h6>\n            </div>\n        </div>\n    )\n}\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            statistics: [],\n            totals: {\n                cases: {},\n                deaths: {}\n            },\n            lastUpdatedAt: null,\n            isLoading: true\n        };\n    }\n\n    setIsLoading(flag) {\n        this.setState({\n            isLoading: flag\n        })\n    }\n\n    render() {\n        return(\n            <div className=\"row\">\n                {this.isPageLoading() && this.renderLoader()}\n                {this.isStatsReady() && this.renderStats()}\n            </div>\n        )\n    }\n\n    isStatsReady() {\n        return !this.state.isLoading;\n    }\n\n    isPageLoading() {\n        return this.state.isLoading;\n    }\n\n    renderLoader() {\n        return(\n            <div className=\"col-lg-12 text-center\">\n                <h4>Loading...</h4>\n            </div>\n        );\n    }\n\n    renderStats() {\n        return(\n            <React.Fragment>\n                <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-6\">\n                    <DashboardHeader lastUpdatedAt={this.state.lastUpdatedAt}/>\n                    <TotalsTable totals={this.state.totals}/>\n                    <CountryTable statistics={this.state.statistics}/>\n                </div>\n                <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-6\">\n                    <WorldMap stats={this.state.statistics} overallStats={this.state.totals}/>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    componentDidMount() {\n        this.enableLoader();\n        this.fetchData();\n        this.refreshDashboardHandler = setInterval(() => this.fetchData(), MINUTE_5)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.refreshDashboardHandler);\n    }\n\n    enableLoader() {\n        this.setIsLoading(true);\n    }\n\n    disableLoader() {\n        this.setIsLoading(false);\n    }\n\n    fetchData() {\n        covid19api.get(\"/statistics\")\n            .then((response) => {\n                let statsByCountry = response.data.response;\n                let overallStats = _.find(statsByCountry, {\n                    country: 'All'\n                });\n                _.remove(statsByCountry, {\n                    country: 'All'\n                });\n                this.updateStats(statsByCountry, overallStats);\n                this.disableLoader();\n            }).catch((error) => {\n            console.log(error);\n            this.disableLoader();\n        });\n    }\n\n    updateStats(statsByCountry, overallStats) {\n        this.setState({\n            statistics: statsByCountry,\n            totals: overallStats,\n            lastUpdatedAt: overallStats.time\n        });\n    }\n}\n\nexport default Dashboard;","import React from \"react\";\nimport './Footer.css';\n\nexport default function () {\n    return(\n        <div className=\"footer-container\">\n            <p>Developed by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/naganandakk\">Nagananda K K</a></p>\n            <p>Powered by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://rapidapi.com\">Rapid API</a></p>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Dashboard from \"./pages/dashboard\";\nimport Footer from \"./components/footer/Footer\";\n\nclass App extends React.Component {\n    render() {\n        return(\n            <React.Fragment>\n                <div className=\"container-fluid page-container\">\n                    <Dashboard/>\n                </div>\n                <Footer/>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}