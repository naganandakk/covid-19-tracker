{"version":3,"sources":["theme.js","apis/covid19.js","components/summary/SummaryCard.js","components/summary/Summary.js","components/country-table/columnConfig.js","components/country-table/tableOptions.js","components/country-table/tableData.js","components/country-table/CountryTable.js","components/header/Header.js","components/footer/Footer.js","components/dashboard/Dashboard.js","serviceWorker.js","ServiceWorkerUpdate.js","App.js","index.js"],"names":["commonStyles","typography","fontFamily","join","overrides","MUIDataTable","paper","overflowX","DefaultTheme","DarkTheme","palette","type","client","axios","create","baseURL","summaryCard","props","Card","CardContent","Typography","align","className","variant","component","title","total","toLocaleString","summary","loading","Fragment","Grid","container","spacing","item","xs","Skeleton","height","cardsInfo","TotalConfirmed","TotalActive","TotalRecovered","TotalDeaths","map","card","key","sm","md","SummaryCard","animation","renderSummaryCards","numberCellProps","v","style","textAlign","renderAsNumber","str","columnConfig","name","options","sortDirection","setCellProps","setCellHeaderProps","customBodyRender","value","tableOptions","selectableRows","print","download","elevation","responsive","countries","tableData","forEach","country","push","Country","CountryTable","data","columns","useStyles","makeStyles","theme","rightContent","marginLeft","marginRight","lastUpdatedTitle","fontSize","textTransform","breakpoints","down","lastUpdatedTime","ThemeToggle","icon","toggleTo","IconButton","onClick","toggleTheme","edge","color","aria-label","Header","classes","AppBar","position","Toolbar","lastUpdatedAt","fromNow","Footer","marginTop","Link","target","rel","href","Dashboard","state","articles","chartData","this","fetchGlobalCovidStats","refreshDataHandler","setInterval","clearInterval","Container","maxWidth","Summary","covid19Api","get","response","setState","Global","Countries","Date","console","log","React","Component","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","origin","addEventListener","swUrl","fetch","headers","then","contentType","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ServiceWorkerUpdate","useState","showReload","setShowReload","waitingWorker","setWaitingWorker","onSWUpdate","waiting","useEffect","reloadPage","postMessage","Snackbar","open","message","anchorOrigin","vertical","horizontal","action","Button","size","App","setTheme","ThemeProvider","createMuiTheme","CssBaseline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fde68ad8.chunk.js","sourcesContent":["const commonStyles = {\n    typography: {\n        fontFamily: [\n            'Comfortaa', 'cursive'\n        ].join(',')\n    },\n    overrides: {\n        MUIDataTable: {\n            paper: {\n                overflowX: \"auto\"\n            }\n        }\n    }\n}\n\nexport const DefaultTheme = {\n    ...commonStyles\n};\n\nexport const DarkTheme ={\n    ...commonStyles,\n    palette: {\n        type: \"dark\"\n    }\n};\n","import axios from 'axios';\n\nconst client = axios.create({\n    baseURL: \"https://api.covid19api.com\"\n})\n\nexport default client;","import React from 'react';\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst summaryCard = (props) => {\n    return(\n        <Card>\n            <CardContent>\n                <Typography align=\"center\" className={`text-${props.variant}`} component=\"p\">{props.title}</Typography>\n                <Typography align=\"center\" className={`text-${props.variant}`} component=\"p\">{props.total ? props.total.toLocaleString() : props.total}</Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default summaryCard;","import React from 'react';\nimport SummaryCard from './SummaryCard';\nimport Grid from \"@material-ui/core/Grid\";\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nconst summary = (props) => {\n    const { summary, loading } = props;\n    const renderSummaryCards = () => {\n        const cardsInfo = [\n            { variant: \"confirmed\", title: \"CONFIRMED\", total: summary.TotalConfirmed },\n            { variant: \"active\", title: \"ACTIVE\", total: summary.TotalActive },\n            { variant: \"recovered\", title: \"RECOVERED\", total: summary.TotalRecovered },\n            { variant: \"deceased\", title: \"DECEASED\", total: summary.TotalDeaths }\n        ];\n\n        return(\n            <Grid container spacing={1}>\n                {cardsInfo.map(card => {\n                    return(\n                        <Grid key={card.title} item xs={6} sm={6} md>\n                            <SummaryCard animation=\"wave\" variant={card.variant} title={card.title} total={card.total} />\n                        </Grid>\n                    )\n                })}\n            </Grid>\n        )\n    }\n    const renderLoader = () => {\n        return(\n            <Grid container spacing={1}>\n                <Grid item xs>\n                    <Skeleton variant=\"rect\" height={100} />\n                </Grid>\n                <Grid item xs>\n                    <Skeleton variant=\"rect\" height={100} />\n                </Grid>\n                <Grid item xs>\n                    <Skeleton variant=\"rect\" height={100} />\n                </Grid>\n                <Grid item xs>\n                    <Skeleton variant=\"rect\" height={100} />\n                </Grid>\n            </Grid>\n        )\n    }\n\n    return(\n        <React.Fragment>\n            <h2>Global Statistics</h2>\n            { loading ? renderLoader() : renderSummaryCards() }\n        </React.Fragment>\n    )\n}\n\nexport default summary;","const numberCellProps = v => {\r\n    return {\r\n        style: {\r\n            textAlign: \"right\",\r\n        }\r\n    }\r\n}\r\n\r\nconst renderAsNumber = str => {\r\n    return str.toLocaleString();\r\n}\r\nconst columnConfig = [\r\n    {name: \"COUNTRY\"},\r\n    {\r\n        name: \"CONFIRMED\",\r\n        options: {\r\n            sortDirection: \"desc\",\r\n            setCellProps: numberCellProps,\r\n            setCellHeaderProps: numberCellProps,\r\n            customBodyRender: value => renderAsNumber(value)\r\n        }\r\n    },\r\n    {\r\n        name: \"ACTIVE\",\r\n        options: {\r\n            setCellProps: numberCellProps,\r\n            setCellHeaderProps: numberCellProps,\r\n            customBodyRender: value => renderAsNumber(value)\r\n        }\r\n    },\r\n    {\r\n        name: \"RECOVERED\",\r\n        options: {\r\n            setCellProps: numberCellProps,\r\n            setCellHeaderProps: numberCellProps,\r\n            customBodyRender: value => renderAsNumber(value)\r\n        }\r\n    },\r\n    {\r\n        name: \"DECEASED\",\r\n        options: {\r\n            setCellProps: numberCellProps,\r\n            setCellHeaderProps: numberCellProps,\r\n            customBodyRender: value => renderAsNumber(value)\r\n        }\r\n    }\r\n]\r\n\r\nexport default columnConfig;","const tableOptions = {\r\n    selectableRows: \"none\",\r\n    print: false,\r\n    download: false,\r\n    elevation: 2,\r\n    responsive: \"scrollFullHeight\"\r\n};\r\n\r\nexport default tableOptions;","const prepareFromCountries = countries => {\r\n    const tableData = [];\r\n    if (countries) {\r\n        countries.forEach((country) => {\r\n            tableData.push([\r\n                country.Country,\r\n                country.TotalConfirmed,\r\n                country.TotalConfirmed - country.TotalRecovered - country.TotalDeaths,\r\n                country.TotalRecovered,\r\n                country.TotalDeaths\r\n            ])\r\n        });\r\n    }\r\n\r\n    return tableData;\r\n}\r\n\r\nexport default {\r\n    prepareFromCountries: prepareFromCountries\r\n}","import React from 'react';\nimport MUIDataTable from \"mui-datatables\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport columnConfig from './columnConfig';\nimport tableOptions from './tableOptions';\nimport tableData from './tableData';\n\nexport default function CountryTable(props) {\n    const {countries, loading} = props;\n    const renderTable = () => {\n        return (\n            <MUIDataTable\n                data={tableData.prepareFromCountries(countries)}\n                columns={columnConfig}\n                options={tableOptions}\n            />\n        )\n    }\n\n    const renderLoader = () => {\n        return (\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <Skeleton animation=\"wave\" variant=\"rect\" height={50}/>\n                </Grid>\n                <Grid item xs={12}>\n                    <Skeleton animation=\"wave\" variant=\"rect\" height={50}/>\n                </Grid>\n                <Grid item xs={12}>\n                    <Skeleton animation=\"wave\" variant=\"rect\" height={50}/>\n                </Grid>\n            </Grid>\n        )\n    }\n\n    return (\n        <React.Fragment>\n            <h2>Country-wise Statistics</h2>\n            {loading ? renderLoader() : renderTable()}\n        </React.Fragment>\n    )\n}","import React from 'react';\nimport Moment from 'react-moment';\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport DefaultTheme from \"@material-ui/icons/WbSunny\";\nimport DarkTheme from \"@material-ui/icons/NightsStayOutlined\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nconst useStyles = makeStyles(theme => ({\n    rightContent: {\n        marginLeft: \"auto\",\n        marginRight: -1\n    },\n    lastUpdatedTitle: {\n        fontSize: \"0.7rem\",\n        textTransform: \"uppercase\",\n        textAlign: \"right\",\n        [theme.breakpoints.down('xs')]: {\n            fontSize: '0.6rem'\n        }\n    },\n    lastUpdatedTime: {\n        fontSize: \"0.8rem\",\n        textTransform: \"uppercase\",\n        [theme.breakpoints.down('xs')]: {\n            fontSize: '0.7rem'\n        }\n    }\n}));\n\n\nconst ThemeToggle = props => {\n    const icon = props.theme === \"dark\" ? <DefaultTheme/> : <DarkTheme/>;\n    const toggleTo = props.theme === \"dark\" ? \"default\" : \"dark\";\n\n    return(\n        <IconButton onClick={() => props.toggleTheme(toggleTo)} edge=\"start\" color=\"inherit\" aria-label=\"theme-toggle\">\n            {icon}\n        </IconButton>\n    )\n}\n\nexport default function Header(props) {\n    const classes = useStyles();\n\n    const renderLastUpdatedAt = () => {\n        if (props.lastUpdatedAt) {\n            return(\n                <div className={classes.rightContent}>\n                    <Typography className={classes.lastUpdatedTitle} component=\"h6\">LAST UPDATED</Typography>\n                    <Typography className={classes.lastUpdatedTime} component=\"h6\"><Moment fromNow>{props.lastUpdatedAt}</Moment></Typography>\n                </div>\n            )\n        }\n\n        return null;\n    }\n\n    return(\n        <AppBar position=\"sticky\" color=\"default\" elevation={0}>\n            <Toolbar>\n                <ThemeToggle theme={props.theme} toggleTheme={(theme) => {props.toggleTheme(theme)}}/>\n                <Typography component=\"h1\">COVID-19 TRACKER</Typography>\n                {renderLastUpdatedAt()}\n            </Toolbar>\n        </AppBar>\n    )\n}","import React from 'react';\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nexport default function Footer() {\r\n    return(\r\n        <div style={{textAlign: \"center\", marginTop:\"15px\"}}>\r\n            <p>Developed by <Link target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/naganandakk\">Nagananda K K</Link></p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport covid19Api from '../../apis/covid19';\r\nimport Container from '@material-ui/core/Container';\r\nimport Summary from \"../summary/Summary\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CountryTable from \"../country-table/CountryTable\";\r\nimport Header from \"../header/Header\";\r\nimport Footer from \"../footer/Footer\";\r\n\r\nconst MINUTE_5 = 1000 * 60 * 5;\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            summary: {},\r\n            countries: [],\r\n            articles: [],\r\n            lastUpdatedAt: null,\r\n            loading: {\r\n                articles: true,\r\n                summary: true,\r\n                countries: true,\r\n                chartData: false\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchGlobalCovidStats();\r\n        this.refreshDataHandler = setInterval(() => this.fetchGlobalCovidStats(), MINUTE_5);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.refreshDataHandler);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Header theme={this.props.theme} toggleTheme={this.props.toggleTheme} lastUpdatedAt={this.state.lastUpdatedAt}/>\r\n                <Container maxWidth=\"xl\">\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} md={3}></Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <Summary loading={this.state.loading.summary} summary={this.state.summary}/>\r\n                            <CountryTable loading={this.state.loading.countries} countries={this.state.countries} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n                <Footer/>\r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n\r\n    async fetchGlobalCovidStats() {\r\n        try {\r\n            const response = await covid19Api.get(\"/summary\");\r\n            this.setState({\r\n                summary: {\r\n                    ...response.data.Global,\r\n                    \"TotalActive\": response.data.Global.TotalConfirmed - response.data.Global.TotalRecovered - response.data.Global.TotalDeaths\r\n                },\r\n                countries: response.data.Countries,\r\n                lastUpdatedAt: response.data.Date,\r\n                loading: {\r\n                    ...this.state.loading,\r\n                    summary: false,\r\n                    countries: false\r\n                }\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Dashboard;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Index is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect } from 'react';\r\nimport { Snackbar, Button } from '@material-ui/core';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst ServiceWorkerUpdate = () => {\r\n    const [showReload, setShowReload] = React.useState(false);\r\n    const [waitingWorker, setWaitingWorker] = React.useState(null);\r\n\r\n    const onSWUpdate = (registration) => {\r\n        setShowReload(true);\r\n        setWaitingWorker(registration.waiting);\r\n    };\r\n\r\n    useEffect(() => {\r\n        serviceWorker.register({ onUpdate: onSWUpdate });\r\n    }, []);\r\n\r\n    const reloadPage = () => {\r\n        if (waitingWorker) {\r\n            waitingWorker.postMessage({ type: 'SKIP_WAITING' })\r\n        }\r\n        setShowReload(false);\r\n        window.location.reload(true);\r\n    };\r\n\r\n    return (\r\n        <Snackbar\r\n            open={showReload}\r\n            message=\"A new version is available!\"\r\n            onClick={reloadPage}\r\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            action={\r\n                <Button\r\n                    color=\"inherit\"\r\n                    size=\"small\"\r\n                    onClick={reloadPage}\r\n                >\r\n                    Reload\r\n        </Button>\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default ServiceWorkerUpdate;","import React from 'react';\nimport { DefaultTheme, DarkTheme } from './theme';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport './App.css';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport ServiceWorkerUpdate from \"./ServiceWorkerUpdate\";\n\nexport default function App() {\n    const [theme, setTheme] = React.useState(\"dark\");\n    const toggleTheme = theme => {\n        setTheme(theme);\n    }\n\n    return (\n        <ThemeProvider theme={theme === \"dark\" ? createMuiTheme(DarkTheme) : createMuiTheme(DefaultTheme)}>\n            <CssBaseline />\n            <Dashboard theme={theme} toggleTheme={toggleTheme}/>\n            <ServiceWorkerUpdate/>\n        </ThemeProvider>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-comfortaa';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}